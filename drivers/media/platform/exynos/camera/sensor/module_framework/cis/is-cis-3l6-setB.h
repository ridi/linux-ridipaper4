/*
 * Samsung Exynos5 SoC series Sensor driver
 *
 *
 * Copyright (c) 2018 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef IS_CIS_3L6_SET_B_H
#define IS_CIS_3L6_SET_B_H

#include "is-cis.h"
#include "is-cis-3l6.h"

/* S5K3L6_ReferenceSetfile_v0.9g_20190219_For SOC.xlsx */
const u32 sensor_3l6_setfile_B_Global[] = {
	/* this commented data is set to cis_init
	 */
    //OTP page select(def.00h)
    0x0A02, 0x3400, 0x2,
	//Global
	0x3084,	0x1314, 0x2,
	0x3266,	0x0001, 0x2,
	0x3242,	0x2020, 0x2,
	0x306A,	0x2F4C, 0x2,
	0x306C,	0xCA01, 0x2,
	0x307A,	0x0D20, 0x2,
	0x309E,	0x002D, 0x2,
	0x3072,	0x0013, 0x2,
	0x3074,	0x0977, 0x2,
	0x3076,	0x9411, 0x2,
	0x3024,	0x0016, 0x2,
	0x3070,	0x3D00, 0x2,
	0x3002,	0x0E00, 0x2,
	0x3006,	0x1000, 0x2,
	0x300A,	0x0C00, 0x2,
	0x3010,	0x0400, 0x2,
	0x3018,	0xC500, 0x2,
	0x303A,	0x0204, 0x2,
	0x3452,	0x0001, 0x2,
	0x3454,	0x0001, 0x2,
	0x3456,	0x0001, 0x2,
	0x3458,	0x0001, 0x2,
	0x345a,	0x0002, 0x2,
	0x345C,	0x0014, 0x2,
	0x345E,	0x0002, 0x2,
	0x3460,	0x0014, 0x2,
	0x3464,	0x0006, 0x2,
	0x3466,	0x0012, 0x2,
	0x3468,	0x0012, 0x2,
	0x346A,	0x0012, 0x2,
	0x346C,	0x0012, 0x2,
	0x346E,	0x0012, 0x2,
	0x3470,	0x0012, 0x2,
	0x3472,	0x0008, 0x2,
	0x3474,	0x0004, 0x2,
	0x3476,	0x0044, 0x2,
	0x3478,	0x0004, 0x2,
	0x347A,	0x0044, 0x2,
	0x347E,	0x0006, 0x2,
	0x3480,	0x0010, 0x2,
	0x3482,	0x0010, 0x2,
	0x3484,	0x0010, 0x2,
	0x3486,	0x0010, 0x2,
	0x3488,	0x0010, 0x2,
	0x348A,	0x0010, 0x2,
	0x348E,	0x000C, 0x2,
	0x3490,	0x004C, 0x2,
	0x3492,	0x000C, 0x2,
	0x3494,	0x004C, 0x2,
	0x3496,	0x0020, 0x2,
	0x3498,	0x0006, 0x2,
	0x349A,	0x0008, 0x2,
	0x349C,	0x0008, 0x2,
	0x349E,	0x0008, 0x2,
	0x34A0,	0x0008, 0x2,
	0x34A2,	0x0008, 0x2,
	0x34A4,	0x0008, 0x2,
	0x34A8,	0x001A, 0x2,
	0x34AA,	0x002A, 0x2,
	0x34AC,	0x001A, 0x2,
	0x34AE,	0x002A, 0x2,
	0x34B0,	0x0080, 0x2,
	0x34B2,	0x0006, 0x2,
	0x32A2,	0x0000, 0x2,
	0x32A4,	0x0000, 0x2,
	0x32A6,	0x0000, 0x2,
	0x32A8,	0x0000, 0x2,
	0x3066,	0x7E00, 0x2,
	0x3004,	0x0800, 0x2,
	0x3C08,	0xFFFF, 0x2, 
};

/*
 * [Mode Information]
 *	0: [MCLK:26,Width:4000,Height:3000,
 *	Format:MIPI_RAW10,mipi_lane:4,
 *	mipi_datarate:1200,
 *	pvi_pclk_inverse:0]
 */

/* 4:3, 0x0 margin */
const u32 sensor_3l6_setfile_B_4000x3000_30fps[] = {
	//size
	0x0344,	0x0070, 0x2,  //x_addr_start
	0x0346,	0x0044, 0x2,  //y_addr_start
	0x0348,	0x100F, 0x2,  //x_addr_end	   
	0x034A,	0x0BFB, 0x2,  //y_addr_end	   
	0x034C,	0x0FA0, 0x2,  //x_output_size
	0x034E,	0x0BB8, 0x2,  //y_output_size
	//Binning
	0x0900,	0x0000, 0x2,  //binning_mode /binning_type
	0x0380,	0x0001, 0x2,  //sub_sample_x_even_inc 
	0x0382,	0x0001, 0x2,  //sub_sample_x_odd_inc 
	0x0384,	0x0001, 0x2,  //sub_sample_y_even_inc 
	0x0386,	0x0001, 0x2,  //sub_sample_y_odd_inc 
	//Output mode
	0x0114,	0x0330, 0x2,  //output_lane_mode
	0x0110,	0x0002, 0x2,  //output_signalling_mode
	//PLL
	0x0136,	0x1A00, 0x2, //extclk_frequency_mhz
	0x0304,	0x0004, 0x2, //pre_pll_clk_div
	0x0306,	0x0078, 0x2, //pll_multiplier
	0x3C1E,	0x0000, 0x2, //clocks_pll_s	  
	0x030C,	0x0003, 0x2, //op_pre_pll_clk_div
	0x030E,	0x004B, 0x2, //op_pll_multiplier
	0x3C16,	0x0000, 0x2, //op_pll_s
	0x0300,	0x0006, 0x2, //vt_pix_clk_div
	//Fps
	0x0342,	0x1320, 0x2,  //line_length_pck                     
	0x0340,	0x0CBC, 0x2,  //frame_length_lines

	//Dphy cntl
	0x38C4,	0x0009, 0x2,
	0x38D8,	0x002A, 0x2,
	0x38DA,	0x000A, 0x2,
	0x38DC,	0x000B, 0x2,
	0x38C2,	0x000A, 0x2,
	0x38C0,	0x000F, 0x2,
	0x38D6,	0x000A, 0x2,
	0x38D4,	0x0009, 0x2,
	0x38B0,	0x000F, 0x2,
	0x3932,	0x1800, 0x2,
	0x3938,	0x000C, 0x2,
	0x0820,	0x04b0, 0x2, // mipi lane
	//Analog  	      
	0x380C,	0x0090, 0x2,
	0x3064,	0xFFCF, 0x2,
	0x309C,	0x0640, 0x2,
	0x3090,	0x8800, 0x2,
	0x3238,	0x000C, 0x2,
	0x314A,	0x5F00, 0x2,
	0x3300,	0x0000, 0x2,
	0x3400,	0x0000, 0x2,
	0x3402,	0x4E42, 0x2,
	0x32B2,	0x0006, 0x2,
	0x32B4,	0x0006, 0x2,
	0x32B6,	0x0006, 0x2,
	0x32B8,	0x0006, 0x2,
	0x3C34,	0x0048, 0x2,
	0x3C36,	0x3000, 0x2,
	0x3C38,	0x0020, 0x2,
	0x393E,	0x4000, 0x2

};


const u32 sensor_3l6_setfile_B_1920x1080_30fps[] = {
    //size
    0x0344, 0x00C0, 0x2,  //x_addr_start
    0x0346, 0x01E8, 0x2,  //y_addr_start
    0x0348, 0x0FBF, 0x2,  //x_addr_end
    0x034A, 0x0A57, 0x2,  //y_addr_end
    0x034C, 0x0780, 0x2,  //x_output_size
    0x034E, 0x0438, 0x2,  //y_output_size
    //Binning
    0x0900, 0x0122, 0x2,  //binning_mode /binning_type
    0x0380, 0x0001, 0x2,  //sub_sample_x_even_inc
    0x0382, 0x0001, 0x2,  //sub_sample_x_odd_inc
    0x0384, 0x0001, 0x2,  //sub_sample_y_even_inc
    0x0386, 0x0003, 0x2,  //sub_sample_y_odd_inc
    //Output mode
    0x0114, 0x0330, 0x2,  //output_lane_mode
    0x0110, 0x0002, 0x2,  //output_signalling_mode
    //PLL
    0x0136, 0x1A00, 0x2,  //extclk_frequency_mhz
    0x0304, 0x0004, 0x2,  //pre_pll_clk_div
    0x0306, 0x0078, 0x2,  //pll_multiplier
    0x3C1E, 0x0000, 0x2,  //clocks_pll_s
    0x030C, 0x0003, 0x2,  //op_pre_pll_clk_div
    0x030E, 0x0082, 0x2,  //op_pll_multiplier
    0x3C16, 0x0002, 0x2,  //op_pll_s
    0x0300, 0x0006, 0x2,  //vt_pix_clk_div
    //Fps
    0x0342, 0x1320, 0x2,  //line_length_pck
    0x0340, 0x0CBC, 0x2,  //frame_length_lines
    //Dphy cntl
    0x38C4, 0x0004, 0x2,
    0x38D8, 0x000F, 0x2,
    0x38DA, 0x0005, 0x2,
    0x38DC, 0x0005, 0x2,
    0x38C2, 0x0004, 0x2,
    0x38C0, 0x0003, 0x2,
    0x38D6, 0x0004, 0x2,
    0x38D4, 0x0003, 0x2,
    0x38B0, 0x0006, 0x2,
    0x3932, 0x2000, 0x2,
    0x3938, 0x000C, 0x2,
    0x0820, 0x0208, 0x2,
    //Analog
    0x380C, 0x0049, 0x2,
    0x3064, 0xFFCF, 0x2,
    0x309C, 0x0640, 0x2,
    0x3090, 0x8000, 0x2,
    0x3238, 0x000B, 0x2,
    0x314A, 0x5F02, 0x2,
    0x3300, 0x0000, 0x2,
    0x3400, 0x0000, 0x2,
    0x3402, 0x4E46, 0x2,
    0x32B2, 0x0008, 0x2,
    0x32B4, 0x0008, 0x2,
    0x32B6, 0x0008, 0x2,
    0x32B8, 0x0008, 0x2,
    0x3C34, 0x0048, 0x2,
    0x3C36, 0x5000, 0x2,
    0x3C38, 0x0020, 0x2,
    0x393E, 0x4000, 0x2,
};

/* for reduce mipi speed at thermal throttling state */
const struct sensor_pll_info_compact sensor_3l6_pllinfo_B_4000x3000_30fps = {
	EXT_CLK_Mhz * 1000 * 1000, /* ext_clk */
	1200000000, /* mipi_datarate */
	480000000,	/* pclk  = VT pix CLK (this value is different by cis) */
	0x0CBC, /* frame_length_lines (0x0341) */
	0x1320, /* line_length_pck (0x0343) */
};

const struct sensor_pll_info_compact sensor_3l6_pllinfo_B_1920x1080_30fps = {
	EXT_CLK_Mhz * 1000 * 1000, /* ext_clk */
	520000000, /* OPPXCLK Data rate [Mbps/lane] (mipi datarate) */
	480000000, /* OPPXCLK pixel rate [Mpps] (pclk) */
	0x0CBC, /* frame_length_lines (0x0341) */
	0x1320 /* line_length_pck (0x0343) */
};


static const u32 *sensor_3l6_setfiles_B[] = {
	sensor_3l6_setfile_B_4000x3000_30fps,
	sensor_3l6_setfile_B_1920x1080_30fps
};

static const u32 sensor_3l6_setfile_B_sizes[] = {
	sizeof(sensor_3l6_setfile_B_4000x3000_30fps) / sizeof(sensor_3l6_setfile_B_4000x3000_30fps[0]),
	sizeof(sensor_3l6_setfile_B_1920x1080_30fps) / sizeof(sensor_3l6_setfile_B_1920x1080_30fps[0])
};

static const struct sensor_pll_info_compact *sensor_3l6_pllinfos_B[] = {
	&sensor_3l6_pllinfo_B_4000x3000_30fps,
	&sensor_3l6_pllinfo_B_1920x1080_30fps
};
#endif
